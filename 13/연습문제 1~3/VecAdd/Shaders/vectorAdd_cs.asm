//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc VecAdd.hlsl /Od /Zi /T cs_5_0 /E CS /Fo vectorAdd_cs.cso /Fc
//    vectorAdd_cs.asm
//
//
// Buffer Definitions: 
//
// Resource bind info for gInputA
// {
//
//   struct Data
//   {
//       
//       float3 v1;                     // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    12
//
// }
//
// Resource bind info for gOutput
// {
//
//   struct Result
//   {
//       
//       float v1;                      // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gInputA                               UAV  struct     consume    0        1
// gOutput                               UAV  struct      append    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_uav_structured u0, 12
dcl_uav_structured u1, 4
dcl_temps 2
dcl_thread_group 64, 1, 1

#line 32 "C:\Users\lemon\DirectX12Study\Directx12_study\13\연습문제 1~3\VecAdd\Shaders\VecAdd.hlsl"
imm_atomic_consume r0.x, u0  // gInputA<0>
ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r1.x, r0.x, l(0), u0.xxxx
ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r1.y, r0.x, l(4), u0.xxxx
ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r1.z, r0.x, l(8), u0.xxxx  // d<2:Inf>
mov r1.x, r1.x  // d<0:Inf>
mov r1.y, r1.y  // d<1:Inf>
dp3 r0.x, r1.xyzx, r1.xyzx
sqrt r0.x, r0.x  // r<0:NaN:Inf>
imm_atomic_alloc r1.x, u1  // gOutput<0>
store_structured u1.x, r1.x, l(0), r0.x  // gOutput<0>

#line 30
ret 
// Approximately 11 instruction slots used
