//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc BezierTessellation.hlsl /Od /Zi /T ds_5_0 /E DS /Fo
//    BezierTessellation_ds.cso /Fc BezierTessellation_ds.asm
//
//
// Buffer Definitions: 
//
// cbuffer cbPerObject
// {
//
//   float4x4 gWorld;                   // Offset:    0 Size:    64
//   float4x4 gTexTransform;            // Offset:   64 Size:    64 [unused]
//
// }
//
// cbuffer cbPass
// {
//
//   float4x4 gView;                    // Offset:    0 Size:    64 [unused]
//   float4x4 gInvView;                 // Offset:   64 Size:    64 [unused]
//   float4x4 gProj;                    // Offset:  128 Size:    64 [unused]
//   float4x4 gInvProj;                 // Offset:  192 Size:    64 [unused]
//   float4x4 gViewProj;                // Offset:  256 Size:    64
//   float4x4 gInvViewProj;             // Offset:  320 Size:    64 [unused]
//   float3 gEyePosW;                   // Offset:  384 Size:    12 [unused]
//   float cbPerObjectPad1;             // Offset:  396 Size:     4 [unused]
//   float2 gRenderTargetSize;          // Offset:  400 Size:     8 [unused]
//   float2 gInvRenderTargetSize;       // Offset:  408 Size:     8 [unused]
//   float gNearZ;                      // Offset:  416 Size:     4 [unused]
//   float gFarZ;                       // Offset:  420 Size:     4 [unused]
//   float gTotalTime;                  // Offset:  424 Size:     4 [unused]
//   float gDeltaTime;                  // Offset:  428 Size:     4 [unused]
//   float4 gAmbientLight;              // Offset:  432 Size:    16 [unused]
//   float4 gFogColor;                  // Offset:  448 Size:    16 [unused]
//   float gFogStart;                   // Offset:  464 Size:     4 [unused]
//   float gFogRange;                   // Offset:  468 Size:     4 [unused]
//   float2 cbPerObjectPad2;            // Offset:  472 Size:     8 [unused]
//   
//   struct Light
//   {
//       
//       float3 Strength;               // Offset:  480
//       float FalloffStart;            // Offset:  492
//       float3 Direction;              // Offset:  496
//       float FalloffEnd;              // Offset:  508
//       float3 Position;               // Offset:  512
//       float SpotPower;               // Offset:  524
//
//   } gLights[16];                     // Offset:  480 Size:   768 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cbPerObject                       cbuffer      NA          NA    0        1
// cbPass                            cbuffer      NA          NA    1        1
//
//
//
// Patch Constant signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_TessFactor            0   x           0 QUADEDGE  float       
// SV_TessFactor            1   x           1 QUADEDGE  float       
// SV_TessFactor            2   x           2 QUADEDGE  float       
// SV_TessFactor            3   x           3 QUADEDGE  float       
// SV_InsideTessFactor      0   x           4  QUADINT  float       
// SV_InsideTessFactor      1   x           5  QUADINT  float       
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// POSITION                 0   xyz         0     NONE  float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float   xyzw
// POSITION                 0   xyz         1     NONE  float   xyz 
// NORMAL                   0   xyz         2     NONE  float   xyz 
// TEXCOORD                 0   xy          3     NONE  float   xy  
//
// Tessellation Domain   # of control points
// -------------------- --------------------
// Quadrilateral                           9
//
ds_5_0
dcl_input_control_point_count 9
dcl_tessellator_domain domain_quad
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[20], immediateIndexed
dcl_input vDomain.xy
dcl_input vicp[9][0].xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xy
dcl_temps 7

#line 183 "C:\Users\lemon\DirectX12Study\Directx12_study\14\연습문제 7, 8\BezierPatch\Shaders\BezierTessellation.hlsl"
nop 
mov r0.x, vDomain.x  // t<0>

#line 143
mov r0.y, -r0.x
add r0.y, r0.y, l(1.000000)  // invT<0>

#line 151
mul r1.x, r0.y, r0.y  // BernsteinBasis<0:Inf:[0f,1.#INFf]>
mul r0.z, r0.x, l(2.000000)
mul r1.y, r0.y, r0.z  // BernsteinBasis<1:NaN:Inf>
mul r1.z, r0.x, r0.x  // BernsteinBasis<2:Inf:[0f,1.#INFf]>

#line 183
mov r1.xyz, r1.xyzx  // basisU<0:Inf:[0f,1.#INFf],1:NaN:Inf,2:Inf:[0f,1.#INFf]>
nop 
mov r0.z, vDomain.y  // t<0>

#line 143
mov r0.w, -r0.z
add r0.w, r0.w, l(1.000000)  // invT<0>

#line 151
mul r2.x, r0.w, r0.w  // BernsteinBasis<0:Inf:[0f,1.#INFf]>
mul r1.w, r0.z, l(2.000000)
mul r2.y, r0.w, r1.w  // BernsteinBasis<1:NaN:Inf>
mul r2.z, r0.z, r0.z  // BernsteinBasis<2:Inf:[0f,1.#INFf]>

#line 184
mov r2.xyz, r2.xyzx  // basisV<0:Inf:[0f,1.#INFf],1:NaN:Inf,2:Inf:[0f,1.#INFf]>
nop 

#line 171
mul r3.x, r0.y, l(-2.000000)  // dBernsteinBasis<0:Inf>
mul r0.xy, r0.xxxx, l(-4.000000, 2.000000, 0.000000, 0.000000)
add r3.yz, r0.xxyx, l(0.000000, 2.000000, 0.000000, 0.000000)  // dBernsteinBasis<1:Inf,2:Inf>

#line 186
mov r3.xyz, r3.xyzx  // dBasisU<0:Inf,1:Inf,2:Inf>
nop 

#line 171
mul r4.x, r0.w, l(-2.000000)  // dBernsteinBasis<0:Inf>
mul r0.xy, r0.zzzz, l(-4.000000, 2.000000, 0.000000, 0.000000)
add r4.yz, r0.xxyx, l(0.000000, 2.000000, 0.000000, 0.000000)  // dBernsteinBasis<1:Inf,2:Inf>

#line 187
mov r4.xyz, r4.xyzx  // dBasisV<0:Inf,1:Inf,2:Inf>
nop 
mov r3.xyz, r3.xyzx  // basisU<0:Inf,1:Inf,2:Inf>
mov r2.xyz, r2.xyzx  // basisV<0:Inf:[0f,1.#INFf],1:NaN:Inf,2:Inf:[0f,1.#INFf]>

#line 157
mul r0.xyz, r3.xxxx, vicp[0][0].zxyz
mul r5.xyz, r3.yyyy, vicp[1][0].zxyz
add r0.xyz, r0.xyzx, r5.xyzx
mul r5.xyz, r3.zzzz, vicp[2][0].zxyz
add r0.xyz, r0.xyzx, r5.xyzx
mul r0.xyz, r0.xyzx, r2.xxxx  // sum<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
mul r5.xyz, r3.xxxx, vicp[3][0].zxyz
mul r6.xyz, r3.yyyy, vicp[4][0].zxyz
add r5.xyz, r5.xyzx, r6.xyzx
mul r6.xyz, r3.zzzz, vicp[5][0].zxyz
add r5.xyz, r5.xyzx, r6.xyzx
mul r5.xyz, r2.yyyy, r5.xyzx
add r0.xyz, r0.xyzx, r5.xyzx  // sum<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
mul r5.xyz, r3.xxxx, vicp[6][0].zxyz
mul r3.xyw, r3.yyyy, vicp[7][0].zxzy
add r3.xyw, r3.xyxw, r5.xyxz
mul r5.xyz, r3.zzzz, vicp[8][0].zxyz
add r3.xyz, r3.xywx, r5.xyzx
mul r3.xyz, r2.zzzz, r3.xyzx
add r0.xyz, r0.xyzx, r3.xyzx  // sum<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>

#line 162
mov r0.xyz, r0.xyzx  // CubicBezierSum<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>

#line 189
mov r0.xyz, r0.xyzx  // dpdu<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
nop 
mov r1.xyz, r1.xyzx  // basisU<0:Inf:[0f,1.#INFf],1:NaN:Inf,2:Inf:[0f,1.#INFf]>
mov r4.xyz, r4.xyzx  // basisV<0:Inf,1:Inf,2:Inf>

#line 157
mul r3.xyz, r1.xxxx, vicp[0][0].yzxy
mul r5.xyz, r1.yyyy, vicp[1][0].yzxy
add r3.xyz, r3.xyzx, r5.xyzx
mul r5.xyz, r1.zzzz, vicp[2][0].yzxy
add r3.xyz, r3.xyzx, r5.xyzx
mul r3.xyz, r3.xyzx, r4.xxxx  // sum<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
mul r5.xyz, r1.xxxx, vicp[3][0].yzxy
mul r6.xyz, r1.yyyy, vicp[4][0].yzxy
add r5.xyz, r5.xyzx, r6.xyzx
mul r6.xyz, r1.zzzz, vicp[5][0].yzxy
add r5.xyz, r5.xyzx, r6.xyzx
mul r4.xyw, r4.yyyy, r5.xyxz
add r3.xyz, r3.xyzx, r4.xywx  // sum<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
mul r4.xyw, r1.xxxx, vicp[6][0].yzyx
mul r5.xyz, r1.yyyy, vicp[7][0].yzxy
add r4.xyw, r4.xyxw, r5.xyxz
mul r5.xyz, r1.zzzz, vicp[8][0].yzxy
add r4.xyw, r4.xyxw, r5.xyxz
mul r4.xyz, r4.xywx, r4.zzzz
add r3.xyz, r3.xyzx, r4.xyzx  // sum<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>

#line 162
mov r3.xyz, r3.xyzx  // CubicBezierSum<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>

#line 190
mov r3.xyz, r3.xyzx  // dpdv<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
nop 

#line 157
mul r4.xyz, r1.xxxx, vicp[0][0].xyzx
mul r5.xyz, r1.yyyy, vicp[1][0].xyzx
add r4.xyz, r4.xyzx, r5.xyzx
mul r5.xyz, r1.zzzz, vicp[2][0].xyzx
add r4.xyz, r4.xyzx, r5.xyzx
mul r4.xyz, r2.xxxx, r4.xyzx  // sum<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r5.xyz, r1.xxxx, vicp[3][0].xyzx
mul r6.xyz, r1.yyyy, vicp[4][0].xyzx
add r5.xyz, r5.xyzx, r6.xyzx
mul r6.xyz, r1.zzzz, vicp[5][0].xyzx
add r5.xyz, r5.xyzx, r6.xyzx
mul r2.xyw, r2.yyyy, r5.xyxz
add r2.xyw, r2.xyxw, r4.xyxz  // sum<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r4.xyz, r1.xxxx, vicp[6][0].xyzx
mul r1.xyw, r1.yyyy, vicp[7][0].xyxz
add r1.xyw, r1.xyxw, r4.xyxz
mul r4.xyz, r1.zzzz, vicp[8][0].xyzx
add r1.xyz, r1.xywx, r4.xyzx
mul r1.xyz, r1.xyzx, r2.zzzz
add r1.xyz, r1.xyzx, r2.xywx  // sum<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 194
mul r2.xyz, r0.zxyz, r3.yzxy
mul r0.xyz, r0.xyzx, r3.xyzx
mov r0.xyz, -r0.xyzx
add r0.xyz, r0.xyzx, r2.xyzx  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
dp3 r2.x, r0.xyzx, cb0[0].xyzx  // dout<7:NaN:Inf>
dp3 r2.y, r0.xyzx, cb0[1].xyzx  // dout<8:NaN:Inf>
dp3 r2.z, r0.xyzx, cb0[2].xyzx  // dout<9:NaN:Inf>
mov r1.w, l(1.000000)
dp4 r0.x, r1.xyzw, cb0[0].xyzw  // posW<0:NaN:Inf>
dp4 r0.y, r1.xyzw, cb0[1].xyzw  // posW<1:NaN:Inf>
dp4 r0.z, r1.xyzw, cb0[2].xyzw  // posW<2:NaN:Inf>
dp4 r0.w, r1.xyzw, cb0[3].xyzw  // posW<3:NaN:Inf>
mov r1.x, r0.x  // posW<0:NaN:Inf>
mov r1.y, r0.y  // posW<1:NaN:Inf>
mov r1.z, r0.z  // posW<2:NaN:Inf>
mov r1.xyz, r1.xyzx  // dout<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
dp4 r3.x, r0.xyzw, cb1[16].xyzw  // dout<0:NaN:Inf>
dp4 r3.y, r0.xyzw, cb1[17].xyzw  // dout<1:NaN:Inf>
dp4 r3.z, r0.xyzw, cb1[18].xyzw  // dout<2:NaN:Inf>
dp4 r3.w, r0.xyzw, cb1[19].xyzw  // dout<3:NaN:Inf>
mov r0.xy, vDomain.xyxx  // dout<10,11>
mov o0.xyzw, r3.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o1.xyz, r1.xyzx  // DS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
mov o2.xyz, r2.xyzx  // DS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
mov o3.xy, r0.xyxx  // DS<10,11>
ret 
// Approximately 125 instruction slots used
